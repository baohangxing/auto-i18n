// Vitest Snapshot v1

exports[`#checkEslintConfigExist > should return true 1`] = `
[
  "",
]
`;

exports[`#format > should format file content 1`] = `
"import { execSync } from 'child_process'
import { readJSONSync } from 'fs-extra'

import { packages } from '../meta/packages'
import { changePackageVersion } from './utils'

const { version: oldVersion } = readJSONSync('package.json')

execSync('bumpp --no-push --no-tag --no-push', { stdio: 'inherit' })

const { version } = readJSONSync('package.json')

if (oldVersion === version) {
  console.log('canceled')
  process.exit()
}

for (const { path } of packages)
  changePackageVersion(path, version)

execSync('pnpm run build', { stdio: 'inherit' })

execSync('git add .', { stdio: 'inherit' })

execSync(\`git commit -m \\"chore: release v\${version}\\"\`, { stdio: 'inherit' })
execSync(\`git tag -a v\${version} -m \\"v\${version}\\"\`, { stdio: 'inherit' })
"
`;

exports[`#format > should lint text 1`] = `
"/**
    * sort Object by lexical recursively, retren a new Object.
    * not support array value
    * @param obj
    * @returns
    */
const sortObjectKey = (obj: any): any => {
  if (!obj)
    return {}
  const a: any = {}; const keys = Object.keys(obj).sort(lexicalComparator)
  for (const key of keys) {
    if (typeof obj[key] === 'object')
      a[key] = sortObjectKey(obj[key])
    else
      a[key] = obj[key]
  }
  return a
}
"
`;
